<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8" />
  <title>Hacı Halil Paşa Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    .chat-box { height: 300px; overflow-y: auto; background:#f8f9fa; padding:10px; border:1px solid #ddd; }
    #onlineUsers div { padding: 2px 0; }
  </style>
</head>
<body>

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">Okul Portal</a>
    <ul class="navbar-nav ms-auto">
      <li class="nav-item" id="loginNav">
        <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#loginModal">Giriş Yap</button>
      </li>
      <li class="nav-item dropdown" id="userDropdownNav" style="display: none;">
        <a class="nav-link dropdown-toggle text-white" href="#" data-bs-toggle="dropdown">
          <span id="usernameDisplay">Kullanıcı</span>
        </a>
        <ul class="dropdown-menu">
          <li><a class="dropdown-item" href="#" id="logoutBtn">Çıkış Yap</a></li>
        </ul>
      </li>
    </ul>
  </div>
</nav>

<div class="container my-4">
  <!-- Hoşgeldiniz Bölümü -->
  <div id="guestView">
    <div class="text-center">
      <h1>Hacı Halil Paşa Ortaokulu'na Hoş Geldiniz</h1>
      <p>Giriş yaparak sohbet etmeye başlayabilirsiniz.</p>
    </div>
  </div>

  <!-- Kullanıcı Paneli -->
  <div id="userView" style="display: none;">
    <div class="mb-3">
      <strong>Hoş geldin, <span id="userEmailDisplay"></span></strong>
    </div>
    <div class="card mb-3">
      <div class="card-header">Sohbet</div>
      <div class="card-body">
        <div class="chat-box mb-3" id="chatBox"></div>
        <div class="input-group">
          <input type="text" id="messageInput" class="form-control" placeholder="Mesajınız" />
          <button class="btn btn-primary" id="sendBtn">Gönder</button>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-header">Çevrimiçi Kullanıcılar</div>
      <div class="card-body" id="onlineUsers">Yükleniyor...</div>
    </div>
  </div>
</div>

<!-- Giriş / Kayıt Modal -->
<div class="modal fade" id="loginModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header"><h5 class="modal-title">Giriş / Kayıt</h5></div>
      <div class="modal-body">
        <ul class="nav nav-tabs" id="tabMenu">
          <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#loginTab">Giriş</a></li>
          <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#registerTab">Kayıt</a></li>
        </ul>
        <div class="tab-content mt-3">
          <div class="tab-pane fade show active" id="loginTab">
            <form id="loginForm">
              <input type="email" id="loginEmail" class="form-control mb-2" placeholder="E-posta" required />
              <input type="password" id="loginPassword" class="form-control mb-2" placeholder="Şifre" required />
              <button type="submit" class="btn btn-success w-100">Giriş Yap</button>
            </form>
          </div>
          <div class="tab-pane fade" id="registerTab">
            <form id="registerForm">
              <input type="text" id="registerName" class="form-control mb-2" placeholder="Ad Soyad" required />
              <input type="email" id="registerEmail" class="form-control mb-2" placeholder="E-posta" required />
              <input type="password" id="registerPassword" class="form-control mb-2" placeholder="Şifre" required />
              <select id="registerRole" class="form-select mb-2" required>
                <option value="" disabled selected>Rolünüzü seçin</option>
                <option value="student">Öğrenci</option>
                <option value="teacher">Öğretmen</option>
              </select>
              <button type="submit" class="btn btn-primary w-100">Kayıt Ol</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-auth.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-database.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
  const firebaseConfig = {
    apiKey: "AIzaSyDwcZvzQim9qX9QVT896okIV2-HZ35LMRE",
    authDomain: "baran-fde96.firebaseapp.com",
    databaseURL: "https://baran-fde96-default-rtdb.firebaseio.com",
    projectId: "baran-fde96",
    storageBucket: "baran-fde96.appspot.com",
    messagingSenderId: "180361065424",
    appId: "1:180361065424:web:a9f3351efbe85621953fd5"
  };
  firebase.initializeApp(firebaseConfig);

  const auth = firebase.auth();
  const db = firebase.database();

  const loginForm = document.getElementById("loginForm");
  const registerForm = document.getElementById("registerForm");
  const chatBox = document.getElementById("chatBox");
  const messageInput = document.getElementById("messageInput");
  const sendBtn = document.getElementById("sendBtn");
  const userEmailDisplay = document.getElementById("userEmailDisplay");
  const guestView = document.getElementById("guestView");
  const userView = document.getElementById("userView");
  const onlineUsersDiv = document.getElementById('onlineUsers');
  const loginNav = document.getElementById('loginNav');
  const userDropdownNav = document.getElementById('userDropdownNav');
  const usernameDisplay = document.getElementById('usernameDisplay');
  const logoutBtn = document.getElementById('logoutBtn');

  let currentUserRole = '';

  // Kayıt işlemi
  registerForm.addEventListener("submit", e => {
    e.preventDefault();
    const email = registerForm.registerEmail.value;
    const password = registerForm.registerPassword.value;
    const name = registerForm.registerName.value;
    const role = registerForm.registerRole.value;

    auth.createUserWithEmailAndPassword(email, password)
      .then(userCred => {
        return db.ref("users/" + userCred.user.uid).set({ name, email, role });
      })
      .then(() => {
        alert("Kayıt başarılı, giriş yapabilirsiniz.");
        bootstrap.Modal.getInstance(document.getElementById("loginModal")).hide();
        registerForm.reset();
      })
      .catch(err => alert("Kayıt hatası: " + err.message));
  });

  // Giriş işlemi
  loginForm.addEventListener("submit", e => {
    e.preventDefault();
    const email = loginForm.loginEmail.value;
    const password = loginForm.loginPassword.value;

    auth.signInWithEmailAndPassword(email, password)
      .then(userCred => {
        return db.ref("users/" + userCred.user.uid).once("value");
      })
      .then(snapshot => {
        const userData = snapshot.val();
        currentUserRole = userData.role || '';
        alert(userData.role === "teacher" ? "Öğretmen girişi başarılı!" : "Öğrenci girişi başarılı!");
        bootstrap.Modal.getInstance(document.getElementById("loginModal")).hide();
        loginForm.reset();
      })
      .catch(err => alert("Giriş hatası: " + err.message));
  });

  // Oturum durumu değişince
  auth.onAuthStateChanged(user => {
    if (user) {
      guestView.style.display = "none";
      userView.style.display = "block";
      userEmailDisplay.innerText = user.email;
      usernameDisplay.innerText = user.email;
      loginNav.style.display = "none";
      userDropdownNav.style.display = "block";

      setUserOnlineStatus(user.uid);
      listenToChat();
      listenOnlineUsers();

    } else {
      guestView.style.display = "block";
      userView.style.display = "none";
      chatBox.innerHTML = "";
      onlineUsersDiv.innerHTML = "";
      loginNav.style.display = "block";
      userDropdownNav.style.display = "none";
      currentUserRole = '';
    }
  });

  logoutBtn.addEventListener("click", () => {
    auth.signOut();
  });

  // Mesaj gönderme - buton
  sendBtn.addEventListener("click", sendMessage);

  // Mesaj gönderme - Enter tuşu
  messageInput.addEventListener("keydown", e => {
    if (e.key === "Enter") {
      e.preventDefault();
      sendMessage();
    }
  });

  function sendMessage() {
    const msg = messageInput.value.trim();
    const user = auth.currentUser;
    if (msg !== "" && user) {
      db.ref("chat").push({ user: user.email, message: msg, time: Date.now() });
      messageInput.value = "";
    }
  }

  // Sohbeti dinle
  function listenToChat() {
    chatBox.innerHTML = "";
    db.ref("chat").limitToLast(20).off(); // Önceki dinleyicileri kaldır
    db.ref("chat").limitToLast(20).on("child_added", snapshot => {
      const data = snapshot.val();
      const time = new Date(data.time);
      const timeStr = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const msgEl = document.createElement("div");
      msgEl.innerHTML = `<strong>${data.user}</strong> <small class="text-muted">(${timeStr})</small>: ${data.message}`;
      chatBox.appendChild(msgEl);
      chatBox.scrollTop = chatBox.scrollHeight;
    });
  }

  // Kullanıcının online durumunu ayarla
  function setUserOnlineStatus(uid) {
    const userStatusDatabaseRef = db.ref('/presence/' + uid);

    const isOfflineForDatabase = {
      state: 'offline',
      last_changed: firebase.database.ServerValue.TIMESTAMP,
    };

    const isOnlineForDatabase = {
      state: 'online',
      last_changed: firebase.database.ServerValue.TIMESTAMP,
    };

    db.ref('.info/connected').on('value', function(snapshot) {
      if (snapshot.val() === false) {
        return;
      }
      userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function() {
        userStatusDatabaseRef.set(isOnlineForDatabase);
      });
    });
  }

  // Çevrimiçi kullanıcıları göster
  function listenOnlineUsers() {
    onlineUsersDiv.innerHTML = 'Yükleniyor...';

    db.ref('presence').on('value', snapshot => {
      onlineUsersDiv.innerHTML = '';
      const usersStatus = snapshot.val() || {};
      const onlineUsers = Object.entries(usersStatus)
        .filter(([uid, status]) => status.state === 'online');

      if (onlineUsers.length === 0) {
        onlineUsersDiv.innerText = 'Çevrimiçi kullanıcı yok.';
        return;
      }

      onlineUsers.forEach(([uid]) => {
        db.ref('users/' + uid).once('value').then(userSnap => {
          const userData = userSnap.val();
          if (userData) {
            const userDiv = document.createElement('div');
            userDiv.innerText = userData.name + (userData.role === 'teacher' ? ' (Öğretmen)' : '');
            onlineUsersDiv.appendChild(userDiv);
          }
        });
      });
    });
  }
</script>

</body>
</html>
